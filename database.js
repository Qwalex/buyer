const { PrismaClient } = require('@prisma/client');

class Database {
  constructor() {
    this.prisma = new PrismaClient();
    this.isConnected = false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async init() {
    try {
      await this.prisma.$connect();
      this.isConnected = true;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async ensureConnected() {
    if (!this.isConnected) {
      await this.init();
    }
  }

  // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  async create(modelName, data) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].create({ data });
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
  async findMany(modelName, where = {}, options = {}) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].findMany({
        where,
        ...options
      });
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.length} –∑–∞–ø–∏—Å–µ–π –≤ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
  async findUnique(modelName, where) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].findUnique({ where });
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
  async findFirst(modelName, where = {}) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].findFirst({ where });
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  async update(modelName, where, data) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].update({
        where,
        data
      });
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  async upsert(modelName, where, create, update) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].upsert({
        where,
        create,
        update
      });
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ upsert –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  async delete(modelName, where) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].delete({ where });
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π
  async count(modelName, where = {}) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].count({ where });
      console.log(`üìä –í –º–æ–¥–µ–ª–∏ '${modelName}' –Ω–∞–π–¥–µ–Ω–æ ${result} –∑–∞–ø–∏—Å–µ–π`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
  async deleteMany(modelName, where = {}) {
    await this.ensureConnected();
    try {
      const result = await this.prisma[modelName].deleteMany({ where });
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      throw error;
    }
  }

  // ===== –ú–ï–¢–û–î–´ –î–õ–Ø COLLECTION (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) =====

  // –î–æ–±–∞–≤–∏—Ç—å ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  async addCollectionId(collectionId) {
    try {
      const result = await this.upsert('collection', 
        { collectionId },
        { collectionId },
        { collectionId }
      );
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  async removeCollectionId(collectionId) {
    try {
      const result = await this.delete('collection', { collectionId });
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –∫–æ–ª–ª–µ–∫—Ü–∏–π
  async getAllCollectionIds() {
    try {
      const collections = await this.findMany('collection', {}, {
        orderBy: { createdAt: 'desc' }
      });
      return collections.map(c => c.collectionId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  async hasCollectionId(collectionId) {
    try {
      const collection = await this.findUnique('collection', { collectionId });
      return !!collection;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  async getCollectionCount() {
    try {
      return await this.count('collection');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ID –∫–æ–ª–ª–µ–∫—Ü–∏–π
  async clearAllCollectionIds() {
    try {
      const result = await this.deleteMany('collection');
      return result.count;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
      throw error;
    }
  }

  // ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö
  async getModelsInfo() {
    await this.ensureConnected();
    try {
      const models = ['collection'];
      const info = {};
      
      for (const model of models) {
        try {
          const count = await this.count(model);
          info[model] = { count };
        } catch (error) {
          info[model] = { error: error.message };
        }
      }
      
      return info;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö:', error.message);
      throw error;
    }
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤)
  async executeRaw(query, params = []) {
    await this.ensureConnected();
    try {
      const result = await this.prisma.$queryRawUnsafe(query, ...params);
      console.log('‚úÖ SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  async close() {
    try {
      if (this.isConnected) {
        await this.prisma.$disconnect();
        this.isConnected = false;
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const database = new Database();

module.exports = database;