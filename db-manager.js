const database = require('./database');

class DatabaseManager {
  constructor() {
    this.isInitialized = false;
  }

  async init() {
    if (!this.isInitialized) {
      await database.init();
      this.isInitialized = true;
      console.log('‚úÖ DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Prisma');
    }
  }

  // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª—é–±—É—é –º–æ–¥–µ–ª—å
  async addRecord(modelName, data) {
    await this.init();
    try {
      const result = await database.create(modelName, data);
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ–ª—å '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª—å '${modelName}':`, error.message);
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
  async removeRecord(modelName, where) {
    await this.init();
    try {
      const result = await database.delete(modelName, where);
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
  async getRecords(modelName, where = {}, options = {}) {
    await this.init();
    try {
      const records = await database.findMany(modelName, where, options);
      console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return records;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏–∑ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
  async getRecord(modelName, where) {
    await this.init();
    try {
      const record = await database.findUnique(modelName, where);
      return record;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      return null;
    }
  }

  // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
  async countRecords(modelName, where = {}) {
    await this.init();
    try {
      const count = await database.count(modelName, where);
      console.log(`üìä –í –º–æ–¥–µ–ª–∏ '${modelName}' –Ω–∞–π–¥–µ–Ω–æ ${count} –∑–∞–ø–∏—Å–µ–π`);
      return count;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      return 0;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏
  async updateRecord(modelName, where, data) {
    await this.init();
    try {
      const result = await database.update(modelName, where, data);
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏
  async clearModel(modelName) {
    await this.init();
    try {
      const result = await database.deleteMany(modelName, {});
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –º–æ–¥–µ–ª–∏ '${modelName}'`);
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–æ–¥–µ–ª–∏ '${modelName}':`, error.message);
      return null;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö
  async showModelsInfo() {
    await this.init();
    try {
      const info = await database.getModelsInfo();
      console.log(`\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö:`);
      
      Object.entries(info).forEach(([model, data]) => {
        if (data.error) {
          console.log(`   ${model}: ‚ùå ${data.error}`);
        } else {
          console.log(`   ${model}: ${data.count} –∑–∞–ø–∏—Å–µ–π`);
        }
      });
      console.log('');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö:', error.message);
    }
  }


  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  async close() {
    try {
      await database.close();
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
const runCommand = async () => {
  const manager = new DatabaseManager();
  const args = process.argv.slice(2);
  const command = args[0];
  const param1 = args[1];
  const param2 = args[2];
  const param3 = args[3];

  try {
    switch (command) {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
      case 'models':
        await manager.showModelsInfo();
        break;

      case 'select':
        if (!param1) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js select collection');
          return;
        }
        const records = await manager.getRecords(param1);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.table(records);
        break;

      case 'count':
        if (!param1) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js count collection');
          return;
        }
        await manager.countRecords(param1);
        break;

      case 'add':
        if (!param1 || !param2) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js add collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\'');
          return;
        }
        try {
          const data = JSON.parse(param2);
          await manager.addRecord(param1, data);
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö');
        }
        break;

      case 'delete':
        if (!param1 || !param2) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å–ª–æ–≤–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js delete collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\'');
          return;
        }
        try {
          const where = JSON.parse(param2);
          await manager.removeRecord(param1, where);
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö');
        }
        break;

      case 'update':
        if (!param1 || !param2 || !param3) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å, —É—Å–ª–æ–≤–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js update collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\' \'{"updatedAt":"2024-01-01"}\'');
          return;
        }
        try {
          const where = JSON.parse(param2);
          const data = JSON.parse(param3);
          await manager.updateRecord(param1, where, data);
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö');
        }
        break;

      case 'find':
        if (!param1 || !param2) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js find collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\'');
          return;
        }
        try {
          const where = JSON.parse(param2);
          const record = await manager.getRecord(param1, where);
          if (record) {
            console.log('üìã –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:');
            console.table([record]);
          } else {
            console.log('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö');
        }
        break;

      case 'clear':
        if (!param1) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
          console.log('–ü—Ä–∏–º–µ—Ä: node db-manager.js clear collection');
          return;
        }
        await manager.clearModel(param1);
        break;

      default:
        console.log('üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å Prisma');
        console.log('');
        console.log('üìã –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  models                    - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö');
        console.log('  select <model>            - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏');
        console.log('  count <model>             - –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –º–æ–¥–µ–ª–∏');
        console.log('  add <model> <json>        - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –º–æ–¥–µ–ª—å');
        console.log('  delete <model> <json>     - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ —É—Å–ª–æ–≤–∏—é');
        console.log('  update <model> <where> <data> - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏');
        console.log('  find <model> <json>       - –ù–∞–π—Ç–∏ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ —É—Å–ª–æ–≤–∏—é');
        console.log('  clear <model>             - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –º–æ–¥–µ–ª–∏');
        console.log('');
        console.log('üí° –ü—Ä–∏–º–µ—Ä—ã:');
        console.log('  node db-manager.js models');
        console.log('  node db-manager.js select collection');
        console.log('  node db-manager.js count collection');
        console.log('  node db-manager.js add collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\'');
        console.log('  node db-manager.js delete collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\'');
        console.log('  node db-manager.js find collection \'{"collectionId":"1501b9b9-83e0-4d05-a3af-d0e2021c6d5e"}\'');
        console.log('  node db-manager.js clear collection');
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error.message);
  } finally {
    await manager.close();
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runCommand();
}

module.exports = DatabaseManager;